<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context 
    http://www.springframework.org/schema/context/spring-context-3.1.xsd    
    http://www.springframework.org/schema/tx 
    http://www.springframework.org/schema/tx/spring-tx.xsd">


 	<!--  Usaremos anotacions: indicalo é indicar onde buscalas -->
 	
	<context:annotation-config/>
 
	<context:component-scan base-package="es.udc.fic.tfg.gis.daos" />
	<context:component-scan base-package="es.udc.fic.tfg.gis.services" />

 	<tx:annotation-driven/>  
 	
	
	<!--  DATASOURCE BEAN -->
	
	<!-- Externalizamos os parámetros da conexión a un ficheiro database.properties -->
	

    <!--  Definimos explicitamente un bean para o Data Source (JDBC) -->
    
    <bean id="meuDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="org.postgresql.Driver"/>
        <property name="url" 			 value="jdbc:postgresql://localhost:5432/gisDB"/>
        <property name="username" 		 value="postgres"/>
        <property name="password" 		 value="1234"/>
    </bean>
    
    
    <!--  SESSIONFACTORY BEAN   -->
    
    <!-- 
       En Spring, a interface "AbstractSessionFactoryBean" encapsula a tecnoloxía utilizada para a conexión coa BD
	   Nós queremos usar Hibernate 4, así que debemos usar a implementacion "hibernate4.LocalSessionFactoryBean"
	   A factoría creará (e devolverá) un bean "SessionFactory" de Hibernate
	   Ese é o xeito de compartir unha session factory con Spring (e de proporcionarllela, por exemplo, aos DAOS) mediante inxeccion de dependencias
	   Aforramos a típica clase "Utils"
	   Se quixeramos cambiar de DAOS, usariamos outra factoría de conexions
	  -->     
    
    <bean id="meuSessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="meuDataSource"/>
        <property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
	        	<prop key="hibernate.show_sql">true</prop>
	        	<prop key="hibernate.format_sql">false</prop>
	        	<prop key="hibernate.use_sql_comments">true</prop>	        	
	        	<!-- <prop key="hibernate.current_session_context_class">org.hibernate.context.internal.ThreadLocalSessionContext</prop>  -->
				<prop key="hibernate.c3p0.min_size">5</prop>
				<prop key="hibernate.c3p0.max_size">20</prop>
				<prop key="hibernate.c3p0.timeout">300</prop>
				<prop key="hibernate.c3p0.max_statements">50</prop>
				<prop key="hibernate.c3p0.idle_test_period">3000</prop>
				<prop key="hibernate.hbm2ddl.auto">create</prop>
				
				<!-- 
				hibernate.hbm2ddl.auto
				So the list of possible options are,
				validate: validate the schema, makes no changes to the database.
				update: update the schema.
				create: creates the schema, destroying previous data.
				create-drop: drop the schema at the end of the session. 
				 -->
 
        	</props>            
        </property>
        <!--  Usamos anotacións de Hibernate: hai que dicirlle ónde buscalas -->
        <property name="packagesToScan" value="es.udc.fic.tfg.gis.model" />
    </bean>

	<!--  TRANSACTION_MANAGER BEAN  -->

	<!-- Definimos o xestor de transaccións axeitado (neste caso, o de Hibernate). Debemos indicarlle cal é a factoría de conexións  -->
	  
  	<bean id="meuTransactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"> 
    	<property name="sessionFactory" ref="meuSessionFactory" />
  	</bean>

		
</beans>


